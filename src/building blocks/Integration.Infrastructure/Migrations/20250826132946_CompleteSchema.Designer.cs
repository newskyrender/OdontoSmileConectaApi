// <auto-generated />
using System;
using Integration.Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Integration.Infrastructure.Migrations
{
    [DbContext(typeof(IntegrationDataContext))]
    [Migration("20250826132946_CompleteSchema")]
    partial class CompleteSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Integration.Domain.Entities.Agendamento", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<DateTime>("DataAgendamento")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_agendamento");

                    b.Property<int>("DuracaoMinutos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(60)
                        .HasColumnName("duracao_minutos");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<TimeSpan>("HorarioInicio")
                        .HasColumnType("time(6)")
                        .HasColumnName("horario_inicio");

                    b.Property<string>("Observacoes")
                        .HasColumnType("TEXT")
                        .HasColumnName("observacoes");

                    b.Property<string>("ObservacoesCancelamento")
                        .HasColumnType("TEXT")
                        .HasColumnName("observacoes_cancelamento");

                    b.Property<Guid?>("PacienteId")
                        .HasColumnType("char(36)")
                        .HasColumnName("paciente_id");

                    b.Property<string>("PacienteNome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("paciente_nome");

                    b.Property<Guid>("ProfissionalId")
                        .HasColumnType("char(36)")
                        .HasColumnName("profissional_id");

                    b.Property<string>("Servico")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("servico");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasDefaultValue("Agendado")
                        .HasColumnName("status");

                    b.Property<string>("Telefone")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("telefone");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.HasKey("Id");

                    b.HasIndex("DataAgendamento");

                    b.HasIndex("PacienteId");

                    b.HasIndex("Status");

                    b.HasIndex("ProfissionalId", "DataAgendamento");

                    b.ToTable("agendamentos", (string)null);
                });

            modelBuilder.Entity("Integration.Domain.Entities.Bank", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("active");

                    b.Property<int>("BankNumber")
                        .HasColumnType("int")
                        .HasColumnName("bank_number");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("BankNumber")
                        .IsUnique();

                    b.ToTable("banks", (string)null);
                });

            modelBuilder.Entity("Integration.Domain.Entities.BankAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("AccountDigit")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("account_digit");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("account_number");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("account_type");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("active");

                    b.Property<string>("Agency")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("agency");

                    b.Property<Guid>("BankId")
                        .HasColumnType("char(36)")
                        .HasColumnName("bank_id");

                    b.Property<Guid?>("BankId1")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("BankId1");

                    b.HasIndex("BankId", "AccountNumber", "AccountDigit")
                        .IsUnique();

                    b.ToTable("bank_accounts", (string)null);
                });

            modelBuilder.Entity("Integration.Domain.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("active");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("varchar(18)")
                        .HasColumnName("cnpj");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("company_name");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("contact");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone_number");

                    b.Property<string>("TradingName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("trading_name");

                    b.HasKey("Id");

                    b.HasIndex("Cnpj")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("companies", (string)null);
                });

            modelBuilder.Entity("Integration.Domain.Entities.Documento", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CaminhoArquivo")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("caminho_arquivo");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<Guid>("EntidadeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("entidade_id");

                    b.Property<string>("EntidadeTipo")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("entidade_tipo");

                    b.Property<string>("NomeArquivo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nome_arquivo");

                    b.Property<string>("NomeOriginal")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nome_original");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValue("Pendente")
                        .HasColumnName("status");

                    b.Property<int>("TamanhoBytes")
                        .HasColumnType("int")
                        .HasColumnName("tamanho_bytes");

                    b.Property<string>("TipoDocumento")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("tipo_documento");

                    b.Property<string>("TipoMime")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("tipo_mime");

                    b.HasKey("Id");

                    b.HasIndex("TipoDocumento");

                    b.HasIndex("EntidadeTipo", "EntidadeId");

                    b.ToTable("documentos", (string)null);
                });

            modelBuilder.Entity("Integration.Domain.Entities.Fake", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.ToTable("Fake", (string)null);
                });

            modelBuilder.Entity("Integration.Domain.Entities.Paciente", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("bairro");

                    b.Property<string>("CelularPrincipal")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("celular_principal");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("cep");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("cidade");

                    b.Property<string>("Complemento")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("complemento");

                    b.Property<string>("ContatoEmergencia")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("contato_emergencia");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("varchar(14)")
                        .HasColumnName("cpf");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_nascimento");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("EnderecoCompleto")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("endereco_completo");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("estado");

                    b.Property<string>("EstadoCivil")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("estado_civil");

                    b.Property<decimal?>("LimiteDisponivel")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("limite_disponivel");

                    b.Property<decimal?>("LimiteTotal")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("limite_total");

                    b.Property<decimal>("LimiteUtilizado")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("limite_utilizado");

                    b.Property<string>("NomeCompleto")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nome_completo");

                    b.Property<string>("Numero")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("numero");

                    b.Property<string>("NumeroCooperado")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("numero_cooperado");

                    b.Property<string>("Profissao")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("profissao");

                    b.Property<decimal?>("RendaMensal")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("renda_mensal");

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("sexo");

                    b.Property<string>("SituacaoCooperativa")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("situacao_cooperativa");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValue("Ativo")
                        .HasColumnName("status");

                    b.Property<string>("TelefoneFixo")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("telefone_fixo");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.HasKey("Id");

                    b.HasIndex("Cpf")
                        .IsUnique();

                    b.HasIndex("Email");

                    b.HasIndex("NumeroCooperado");

                    b.ToTable("pacientes", (string)null);
                });

            modelBuilder.Entity("Integration.Domain.Entities.PlanejamentoDigital", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<int?>("ConsultasAcompanhamento")
                        .HasColumnType("int")
                        .HasColumnName("consultas_acompanhamento");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<int?>("DiasEntreTrocas")
                        .HasColumnType("int")
                        .HasColumnName("dias_entre_trocas");

                    b.Property<int>("DuracaoTratamentoMeses")
                        .HasColumnType("int")
                        .HasColumnName("duracao_tratamento_meses");

                    b.Property<int>("NumeroAlinhadores")
                        .HasColumnType("int")
                        .HasColumnName("numero_alinhadores");

                    b.Property<string>("Observacoes")
                        .HasColumnType("TEXT")
                        .HasColumnName("observacoes");

                    b.Property<decimal>("OrcamentoEstimado")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("orcamento_estimado");

                    b.Property<Guid>("PacienteId")
                        .HasColumnType("char(36)")
                        .HasColumnName("paciente_id");

                    b.Property<string>("PrioridadeCaso")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValue("Normal")
                        .HasColumnName("prioridade_caso");

                    b.Property<Guid>("ProfissionalId")
                        .HasColumnType("char(36)")
                        .HasColumnName("profissional_id");

                    b.Property<Guid?>("SolicitacaoOrcamentoId")
                        .HasColumnType("char(36)")
                        .HasColumnName("solicitacao_orcamento_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasDefaultValue("Rascunho")
                        .HasColumnName("status");

                    b.Property<string>("TipoAparelho")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("tipo_aparelho");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.HasKey("Id");

                    b.HasIndex("PacienteId");

                    b.HasIndex("ProfissionalId");

                    b.HasIndex("SolicitacaoOrcamentoId");

                    b.HasIndex("Status");

                    b.HasIndex("TipoAparelho");

                    b.ToTable("planejamentos_digitais", (string)null);
                });

            modelBuilder.Entity("Integration.Domain.Entities.Profissional", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Agencia")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("agencia");

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("ativo");

                    b.Property<string>("BairroConsultorio")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("bairro_consultorio");

                    b.Property<string>("Banco")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("banco");

                    b.Property<string>("Celular")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("celular");

                    b.Property<string>("CepConsultorio")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("cep_consultorio");

                    b.Property<string>("CidadeConsultorio")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("cidade_consultorio");

                    b.Property<string>("Cnpj")
                        .HasMaxLength(18)
                        .HasColumnType("varchar(18)")
                        .HasColumnName("cnpj");

                    b.Property<bool>("CodigoEtica")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("codigo_etica");

                    b.Property<string>("ComplementoConsultorio")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("complemento_consultorio");

                    b.Property<string>("Conta")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("conta");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("varchar(14)")
                        .HasColumnName("cpf");

                    b.Property<string>("CpfTitular")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("varchar(14)")
                        .HasColumnName("cpf_titular");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<string>("Cro")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("cro");

                    b.Property<bool>("DadosPessoais")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("dados_pessoais");

                    b.Property<DateTime>("DataFormatura")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_formatura");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_nascimento");

                    b.Property<TimeSpan?>("DomingoFim")
                        .HasColumnType("time(6)")
                        .HasColumnName("domingo_fim");

                    b.Property<TimeSpan?>("DomingoInicio")
                        .HasColumnType("time(6)")
                        .HasColumnName("domingo_inicio");

                    b.Property<string>("EmailProfissional")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email_profissional");

                    b.Property<string>("EnderecoConsultorio")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("endereco_consultorio");

                    b.Property<string>("EstadoConsultorio")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("estado_consultorio");

                    b.Property<bool>("Marketing")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("marketing");

                    b.Property<string>("NomeCompleto")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nome_completo");

                    b.Property<string>("NomeConsultorio")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nome_consultorio");

                    b.Property<string>("NomeTitular")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nome_titular");

                    b.Property<string>("NumeroCadeiras")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("numero_cadeiras");

                    b.Property<string>("NumeroConsultorio")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("numero_consultorio");

                    b.Property<string>("ObservacoesConsultorio")
                        .HasColumnType("TEXT")
                        .HasColumnName("observacoes_consultorio");

                    b.Property<string>("OutrasEspecialidades")
                        .HasColumnType("TEXT")
                        .HasColumnName("outras_especialidades");

                    b.Property<string>("OutrosEquipamentos")
                        .HasColumnType("TEXT")
                        .HasColumnName("outros_equipamentos");

                    b.Property<string>("PerguntaSeguranca")
                        .HasColumnType("TEXT")
                        .HasColumnName("pergunta_seguranca");

                    b.Property<bool>("Responsabilidade")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("responsabilidade");

                    b.Property<string>("RespostaSegurancaHash")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("resposta_seguranca_hash");

                    b.Property<TimeSpan?>("SabadoFim")
                        .HasColumnType("time(6)")
                        .HasColumnName("sabado_fim");

                    b.Property<TimeSpan?>("SabadoInicio")
                        .HasColumnType("time(6)")
                        .HasColumnName("sabado_inicio");

                    b.Property<TimeSpan?>("SegundaSextaFim")
                        .HasColumnType("time(6)")
                        .HasColumnName("segunda_sexta_fim");

                    b.Property<TimeSpan?>("SegundaSextaInicio")
                        .HasColumnType("time(6)")
                        .HasColumnName("segunda_sexta_inicio");

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("sexo");

                    b.Property<string>("StatusAprovacao")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasDefaultValue("Pendente")
                        .HasColumnName("status_aprovacao");

                    b.Property<string>("TelefoneAdicional")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("telefone_adicional");

                    b.Property<string>("TelefoneConsultorio")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("telefone_consultorio");

                    b.Property<string>("TempoExperiencia")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tempo_experiencia");

                    b.Property<string>("TempoMedioConsulta")
                        .HasColumnType("longtext")
                        .HasColumnName("tempo_medio_consulta");

                    b.Property<bool>("TermosUso")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("termos_uso");

                    b.Property<string>("TipoConta")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tipo_conta");

                    b.Property<string>("UniversidadeFormacao")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("universidade_formacao");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.HasKey("Id");

                    b.HasIndex("Cpf")
                        .IsUnique();

                    b.HasIndex("Cro")
                        .IsUnique();

                    b.HasIndex("EmailProfissional")
                        .IsUnique();

                    b.HasIndex("StatusAprovacao");

                    b.ToTable("profissionais", (string)null);
                });

            modelBuilder.Entity("Integration.Domain.Entities.ProfissionalEquipamento", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Equipamento")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("equipamento");

                    b.Property<Guid>("ProfissionalId")
                        .HasColumnType("char(36)")
                        .HasColumnName("profissional_id");

                    b.HasKey("Id");

                    b.HasIndex("ProfissionalId", "Equipamento")
                        .IsUnique();

                    b.ToTable("profissional_equipamentos", (string)null);
                });

            modelBuilder.Entity("Integration.Domain.Entities.ProfissionalEspecialidade", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Especialidade")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("especialidade");

                    b.Property<Guid>("ProfissionalId")
                        .HasColumnType("char(36)")
                        .HasColumnName("profissional_id");

                    b.HasKey("Id");

                    b.HasIndex("ProfissionalId", "Especialidade")
                        .IsUnique();

                    b.ToTable("profissional_especialidades", (string)null);
                });

            modelBuilder.Entity("Integration.Domain.Entities.ProfissionalFacilidade", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Facilidade")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("facilidade");

                    b.Property<Guid>("ProfissionalId")
                        .HasColumnType("char(36)")
                        .HasColumnName("profissional_id");

                    b.HasKey("Id");

                    b.HasIndex("ProfissionalId", "Facilidade")
                        .IsUnique();

                    b.ToTable("profissional_facilidades", (string)null);
                });

            modelBuilder.Entity("Integration.Domain.Entities.SolicitacaoOrcamento", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("varchar(14)")
                        .HasColumnName("cpf");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("NomeCompleto")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nome_completo");

                    b.Property<int?>("NumeroParcelas")
                        .HasColumnType("int")
                        .HasColumnName("numero_parcelas");

                    b.Property<string>("NumeroPedido")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("numero_pedido");

                    b.Property<string>("Observacoes")
                        .HasColumnType("TEXT")
                        .HasColumnName("observacoes");

                    b.Property<Guid?>("PacienteId")
                        .HasColumnType("char(36)")
                        .HasColumnName("paciente_id");

                    b.Property<Guid?>("ProfissionalId")
                        .HasColumnType("char(36)")
                        .HasColumnName("profissional_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasDefaultValue("Pendente")
                        .HasColumnName("status");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("telefone");

                    b.Property<string>("TipoTratamento")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tipo_tratamento");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<decimal?>("ValorAprovado")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("valor_aprovado");

                    b.Property<decimal?>("ValorParcela")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("valor_parcela");

                    b.HasKey("Id");

                    b.HasIndex("Cpf");

                    b.HasIndex("NumeroPedido")
                        .IsUnique();

                    b.HasIndex("PacienteId");

                    b.HasIndex("ProfissionalId");

                    b.HasIndex("Status");

                    b.ToTable("solicitacoes_orcamento", (string)null);
                });

            modelBuilder.Entity("Integration.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("active");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone_number");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("user_type");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Integration.Domain.Entities.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("ativo");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nome");

                    b.Property<string>("SenhaHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("senha_hash");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("usuarios", (string)null);
                });

            modelBuilder.Entity("Integration.Domain.Entities.Agendamento", b =>
                {
                    b.HasOne("Integration.Domain.Entities.Paciente", "Paciente")
                        .WithMany("Agendamentos")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Integration.Domain.Entities.Profissional", "Profissional")
                        .WithMany("Agendamentos")
                        .HasForeignKey("ProfissionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");

                    b.Navigation("Profissional");
                });

            modelBuilder.Entity("Integration.Domain.Entities.BankAccount", b =>
                {
                    b.HasOne("Integration.Domain.Entities.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Integration.Domain.Entities.Bank", null)
                        .WithMany("BankAccounts")
                        .HasForeignKey("BankId1");

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("Integration.Domain.Entities.PlanejamentoDigital", b =>
                {
                    b.HasOne("Integration.Domain.Entities.Paciente", "Paciente")
                        .WithMany("PlanejamentosDigitais")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Integration.Domain.Entities.Profissional", "Profissional")
                        .WithMany()
                        .HasForeignKey("ProfissionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Integration.Domain.Entities.SolicitacaoOrcamento", "SolicitacaoOrcamento")
                        .WithMany()
                        .HasForeignKey("SolicitacaoOrcamentoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Paciente");

                    b.Navigation("Profissional");

                    b.Navigation("SolicitacaoOrcamento");
                });

            modelBuilder.Entity("Integration.Domain.Entities.ProfissionalEquipamento", b =>
                {
                    b.HasOne("Integration.Domain.Entities.Profissional", "Profissional")
                        .WithMany("Equipamentos")
                        .HasForeignKey("ProfissionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profissional");
                });

            modelBuilder.Entity("Integration.Domain.Entities.ProfissionalEspecialidade", b =>
                {
                    b.HasOne("Integration.Domain.Entities.Profissional", "Profissional")
                        .WithMany("Especialidades")
                        .HasForeignKey("ProfissionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profissional");
                });

            modelBuilder.Entity("Integration.Domain.Entities.ProfissionalFacilidade", b =>
                {
                    b.HasOne("Integration.Domain.Entities.Profissional", "Profissional")
                        .WithMany("Facilidades")
                        .HasForeignKey("ProfissionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profissional");
                });

            modelBuilder.Entity("Integration.Domain.Entities.SolicitacaoOrcamento", b =>
                {
                    b.HasOne("Integration.Domain.Entities.Paciente", "Paciente")
                        .WithMany("SolicitacoesOrcamento")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Integration.Domain.Entities.Profissional", "Profissional")
                        .WithMany("SolicitacoesOrcamento")
                        .HasForeignKey("ProfissionalId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Paciente");

                    b.Navigation("Profissional");
                });

            modelBuilder.Entity("Integration.Domain.Entities.Bank", b =>
                {
                    b.Navigation("BankAccounts");
                });

            modelBuilder.Entity("Integration.Domain.Entities.Paciente", b =>
                {
                    b.Navigation("Agendamentos");

                    b.Navigation("PlanejamentosDigitais");

                    b.Navigation("SolicitacoesOrcamento");
                });

            modelBuilder.Entity("Integration.Domain.Entities.Profissional", b =>
                {
                    b.Navigation("Agendamentos");

                    b.Navigation("Equipamentos");

                    b.Navigation("Especialidades");

                    b.Navigation("Facilidades");

                    b.Navigation("SolicitacoesOrcamento");
                });
#pragma warning restore 612, 618
        }
    }
}
